AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  deck

  SAM Template for deck context

Parameters:
  LegDragonsWebSocketApi:
    Type: String
    Default: "legendary-dragons-ws-api-gateway-LegDragonsWebSocketApi"
  LegDragonsConnectionsEventBus:
    Type: String
    Default: "legendary-dragons-connection-event-bus-LegDragonsConnectionsEventBus"
  LegDragonsBroadcastArn:
    Type: String
    Default: "legendary-dragons-connection-LegDragonsBroadcastArn"

Globals:
  Api:
    TracingEnabled: True
  Function:
    Handler: app.lambda_handler
    Runtime: python3.9
    Environment:
        Variables:
          TABLE_NAME: !Ref DeckTable
    Architectures:
      - x86_64
    Tracing: Active

Resources:
  GetDeckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get_decks/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref DeckTable
        - Statement:
          - Effect: Allow
            Action:
              - 'execute-api:ManageConnections'
            Resource:
              Fn::Sub:
                - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
                - WebSocketApi:
                    Fn::ImportValue:
                      'Fn::Sub': "${LegDragonsWebSocketApi}"

  GetDeckPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetDeckFunction
      Principal: apigateway.amazonaws.com

  GetDeckRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      RouteKey: getDeckReq
      AuthorizationType: NONE
      OperationName: GetDeckRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref GetDeckInteg

  GetDeckInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      Description: Get Deck
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDeckFunction.Arn}/invocations

  CreateDeckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create_deck/
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DeckTable

  CreateDeckPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateDeckFunction
      Principal: apigateway.amazonaws.com

  CreateDeckRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      RouteKey: createDeckReq
      AuthorizationType: NONE
      OperationName: CreateDeckRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref CreateDeckInteg

  CreateDeckInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      Description: Create Deck
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateDeckFunction.Arn}/invocations

  RemoveDeckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/remove_deck/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DeckTable

  RemoveDeckPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RemoveDeckFunction
      Principal: apigateway.amazonaws.com

  RemoveDeckRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      RouteKey: removeDeckReq
      AuthorizationType: NONE
      OperationName: RemoveDeckRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref RemoveDeckInteg

  RemoveDeckInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      Description: Remove Deck
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RemoveDeckFunction.Arn}/invocations

  AddCardToDeckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/add_card_to_deck/
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref DeckTable
        - EventBridgePutEventsPolicy:
            EventBusName: "connection-event-bus"

  AddCardToDeckPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AddCardToDeckFunction
      Principal: apigateway.amazonaws.com

  AddCardToDeckRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      RouteKey: addCardToDeckReq
      AuthorizationType: NONE
      OperationName: AddCardToDeckRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref AddCardToDeckInteg

  AddCardToDeckInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      Description: Add Card to Deck
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddCardToDeckFunction.Arn}/invocations

  StreamDeckChangesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stream_deck_changes/
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: "connection-event-bus"
        - DynamoDBStreamReadPolicy:
            TableName: !Ref DeckTable
            # Reason: https://github.com/aws/serverless-application-model/issues/289#issuecomment-939738271
            StreamName: !Select [3, !Split ["/", !GetAtt DeckTable.StreamArn]]
      Environment:
        Variables:
          EVENT_BUS_NAME:
            Fn::ImportValue:
                !Sub "${LegDragonsConnectionsEventBus}"

  EventSourceDeckTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt DeckTable.StreamArn
      FunctionName: !GetAtt StreamDeckChangesFunction.Arn
      StartingPosition: LATEST

  DeckTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: decks
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1_PK
          AttributeType: S
        - AttributeName: GSI1_SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: "GSI1"
          KeySchema:
            - AttributeName: GSI1_PK
              KeyType: HASH
            - AttributeName: GSI1_SK
              KeyType: RANGE
          Projection:
            ProjectionType: "ALL"
      StreamSpecification:
        StreamViewType: "NEW_AND_OLD_IMAGES"

  DeckEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: deck-broadcast-rule
      EventBusName: "connection-event-bus" # or arn
      EventPattern:
        source:
          - "deck.database"
        detail-type:
          - INSERT
          - REMOVE
          - MODIFY
        detail:
          dynamodb:
            Keys:
              SK:
                S:
                  - prefix: USER
                  - prefix: DECK
              PK:
                S:
                  - prefix: DECK
                  - prefix: DECK_CARD
      State: ENABLED
      Targets:
        - Id: "broadcast-deck-db-changes"
          Arn:
            Fn::ImportValue:
              !Sub "${LegDragonsBroadcastArn}"

  DeckEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::ImportValue:
          !Sub "${LegDragonsBroadcastArn}"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DeckEventRule.Arn

Outputs:
  GetDeckFunction:
    Description: "Get Deck Function ARN"
    Value: !GetAtt GetDeckFunction.Arn
  GetDeckFunctionIamRole:
    Description: "Implicit IAM Role created for Get Deck Function"
    Value: !GetAtt GetDeckFunctionRole.Arn
  RemoveDeckFunction:
    Description: "Remvove Deck Function ARN"
    Value: !GetAtt RemoveDeckFunction.Arn
  RemoveDeckFunctionIamRole:
    Description: "Implicit IAM Role created for Remove Deck Function"
    Value: !GetAtt RemoveDeckFunctionRole.Arn
  CreateDeckFunction:
    Description: "Create Deck Function ARN"
    Value: !GetAtt CreateDeckFunction.Arn
  CreateDeckFunctionIamRole:
    Description: "Implicit IAM Role created for Create Deck Function"
    Value: !GetAtt CreateDeckFunctionRole.Arn
  AddCardToDeckFunction:
    Description: "Add Card To Deck Function ARN"
    Value: !GetAtt AddCardToDeckFunction.Arn
  AddCardToDeckFunctionIamRole:
    Description: "Implicit IAM Role created for Add Card To Deck Function"
    Value: !GetAtt AddCardToDeckFunctionRole.Arn
