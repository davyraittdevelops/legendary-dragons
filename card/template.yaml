AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  card

  SAM Template for card context

Parameters:
  LegDragonsWebSocketApi:
    Type: String
    Default: "legendary-dragons-ws-api-gateway-LegDragonsWebSocketApi"
  LegDragonsConnectionsEventBus:
    Type: String
    Default: "legendary-dragons-connection-event-bus-LegDragonsConnectionsEventBus"
  LegDragonsConnectionsEventBusName:
    Type: String
    Default: "legendary-dragons-connection-event-bus-LegDragonsConnectionsEventBusName"
  LegDragonUserPool:
    Type: String
    Default: "legendary-dragons-cognito-LegDragonUserPool"

Globals:
  Api:
    TracingEnabled: True
  Function:
    Handler: app.lambda_handler
    Runtime: python3.9
    Environment:
        Variables:
          TABLE_NAME: !Ref CardTable
          COGNITO_CLIENT:
            Fn::ImportValue:
              !Sub "${LegDragonUserPool}"
    Architectures:
      - x86_64
    Tracing: Active

Resources:
  SearchCardByKeywordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/search_card_by_keyword/
      Environment:
        Variables:
          SCRYFALL_URL: "https://api.scryfall.com"
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - 'execute-api:ManageConnections'
            Resource:
              Fn::Sub:
                - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
                - WebSocketApi:
                    Fn::ImportValue:
                      'Fn::Sub': "${LegDragonsWebSocketApi}"

  UpdateCardsFromScryfallFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:  functions/update_cards_from_scryfall/
      Environment:
        Variables:
          SCRYFALL_BULK_DATA_URL: "https://api.scryfall.com/bulk-data"
          TABLE_NAME: "cards"
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CardTable
      Events:
        Schedule:
          Type: Schedule
          Properties:
            Description: Runs the lambda every day at 23.45PM.
            Enabled: True
            Schedule: "cron(45 23 * * ? *)"


  SteamCardChangesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/stream_card_changes/
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName:
              Fn::ImportValue:
                !Sub "${LegDragonsConnectionsEventBusName}"
        - DynamoDBStreamReadPolicy:
            TableName: !Ref CardTable
            # Reason: https://github.com/aws/serverless-application-model/issues/289#issuecomment-939738271
            StreamName: !Select [3, !Split ["/", !GetAtt CardTable.StreamArn]]
      Environment:
        Variables:
          EVENT_BUS_NAME:
            Fn::ImportValue:
              !Sub "${LegDragonsConnectionsEventBus}"

  EventSourceCardsTableStream:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt CardTable.StreamArn
      FunctionName: !GetAtt SteamCardChangesFunction.Arn
      StartingPosition: LATEST

  CardTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cards
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1_PK
          AttributeType: S
        - AttributeName: GSI1_SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: "GSI1"
          KeySchema:
            - AttributeName: GSI1_PK
              KeyType: HASH
            - AttributeName: GSI1_SK
              KeyType: RANGE
          Projection:
            ProjectionType: "ALL"
      StreamSpecification:
        StreamViewType: "NEW_AND_OLD_IMAGES"

  SearchCardByKeywordRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      RouteKey: searchCardsByKeywordReq
      AuthorizationType: NONE
      OperationName: SearchCardByKeywordRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SearchCardByKeywordInteg

  SearchCardByKeywordInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      Description: Search chard by keyword integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchCardByKeywordFunction.Arn}/invocations

  SearchCardByKeywordPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SearchCardByKeywordFunction
      Principal: apigateway.amazonaws.com

  #Alert procesor
  CardAlertQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      QueueName: CardAlertQueue

  ProcessCardAlertFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/process_card_alert/
        Environment:
          Variables:
            DATABASE_NAME: "cards"
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref CardTable
        Events:
          SQSEvent:
            Type: SQS
            Properties:
              Queue: !GetAtt CardAlertQueue.Arn
              Enabled: True

  # Get card code
  GetCardFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/get_card/
        Environment:
          Variables:
            DATABASE_NAME: "cards"
        Policies:
          - DynamoDBReadPolicy:
              TableName: !Ref CardTable
          - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                Fn::Sub:
                  - 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*'
                  - WebSocketApi:
                      Fn::ImportValue:
                        'Fn::Sub': "${LegDragonsWebSocketApi}"

  GetCardRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      RouteKey: getCardReq
      AuthorizationType: NONE
      OperationName: GetCardRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref GetCardInteg

  GetCardInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Fn::ImportValue:
          !Sub "${LegDragonsWebSocketApi}"
      Description: Get card integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCardFunction.Arn}/invocations

  GetCardPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetCardFunction
      Principal: apigateway.amazonaws.com

Outputs:
  SearchCardByKeywordFunction:
    Description: "Search Card By Keyword Lambda Function ARN"
    Value: !GetAtt SearchCardByKeywordFunction.Arn
  SearchCardByKeywordFunctionIamRole:
    Description: "Implicit IAM Role created for Search Card By Keyword function"
    Value: !GetAtt SearchCardByKeywordFunctionRole.Arn
  CardAlertQueue:
    Description: "CardAlertQueue"
    Value: !Ref CardAlertQueue
    Export:
      Name: !Sub "${AWS::StackName}-CardAlertQueue"
