asyncapi: 2.5.0
info:
  title: Legendary dragons websocket documentation
  version: '0.1.0'
  description: Legendary Dragons is a Magic The Gathering collection management tool that allows users to track and organize their cards. Users can add, delete, and update cards in their collection, view detailed information about each card, and search for specific cards.  Additionally, it has a deck building feature that allows players to create and manage custom decks. It also includes a wishlist feature that allows users to keep track of cards they want to acquire. The tool is available as a web application.


servers:
  public:
    url: wss://3ghgk1q3mf.execute-api.us-east-1.amazonaws.com/Prod
    protocol: wss

channels:
# Connection

  $connect:
    publish:
      summary: Creates a Websocket connection.
      message:
         $ref: '#/components/messages/$connect'

  $disconnect:
    publish:
      summary: Closes a Websocket connection.
      message:
          $ref: '#/components/messages/$disconnect'


# Card
  searchCardsByKeyword:
    publish:
      summary: Search a card by keyword.
      message:
          $ref: '#/components/messages/searchCardsByKeywordReq'

  getCard:
    publish:
      summary: Retrieves card details.
      message:
          $ref: '#/components/messages/getCardReq'    

# Inventory
  getInventory:
    publish:
      summary: Retrieves the details of a inventory.
      message:
          $ref: '#/components/messages/getInventoryReq'

  addCardToInventory:
    publish:
      summary: Adds a card to the inventory.
      message:
          $ref: '#/components/messages/addCardToInventoryReq'

  removeCardFromInventory:
    publish:
      summary: Removes a card from the inventory.
      message:
          $ref: '#/components/messages/removeCardFromInventoryReq'    

  searchInventoryCard:
    publish:
      summary: Search a card in the inventory.
      message:
          $ref: '#/components/messages/searchInventoryCardReq'

# Deck

  getDecks:
    publish:
      summary: Retrieves all decks.
      message:
          $ref: '#/components/messages/getDecksReq'    

  getDeck:
    publish:
      summary: Retrieves deck details.
      message:
          $ref: '#/components/messages/getDeckReq'

  createDeck:
    publish:
      summary: Creates a new deck.
      message:
          $ref: '#/components/messages/createDeckReq'       

  removeDeck:
    publish:
      summary: Removes a deck.
      message:
          $ref: '#/components/messages/removeDeckReq'  

  moveDeckCard:
    publish:
      summary: Moves a card from main deck to side deck and visa versa
      message:
          $ref: '#/components/messages/moveDeckCardReq'            

  addCardToDeck:
    publish:
      summary: Adds a card to the deck.
      message:
          $ref: '#/components/messages/addCardToDeckReq'     

  removeCardFromDeck:
    publish:
      summary: Removes a card from deck.
      message:
          $ref: '#/components/messages/removeCardFromDeckReq' 


# Wishlist   

  createAlert:
    publish:
      summary: Creates a price or availability alert.
      message:
          $ref: '#/components/messages/createAlertReq' 

  getWishlist:
    publish:
      summary: Retrieves wishlist details.
      message:
          $ref: '#/components/messages/getWishlistReq' 

  createWishlistItem:
    publish:
      summary: Creates a wishlist item.
      message:
          $ref: '#/components/messages/createWishlistItemReq'

  getAlerts:
    publish:
      summary: Get the alerts of a wishlist item.
      message:
          $ref: '#/components/messages/getAlertsReq'           

  removeAlert:
    publish:
      summary: Removes a price or availability alert.
      message:
          $ref: '#/components/messages/removeAlertReq'  

  removeWishlistItem:
    publish:
      summary: Removes a wishlist item.
      message:
          $ref: '#/components/messages/removeWishlistItemReq'  

# COMPONENTS ATTACHED TO THE CHANNELS
components:
  messages:

# Connection

    $connect:
      payload:
        type: object
        properties:
          action:
            type: string
            description: Connect to Websocket (wss) url with a valid JWT token
          token:
            type: string
            description: Token should be a valid JWT token retrieved from the /login function
      examples:
        - name:  $connect
          payload:
            action/route: $connect
            token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0Ijox'

    $disconnect:
      payload:
        type: object
        properties:
          action:
            type: string
            description: Disconnect to Websocket (wss) url
          connectionId:
            type: string
            description: The connectionId that will be terminated
      examples:
        - name:  $disconnect
          payload:
            action/route: $disconnect
# Card

    searchCardsByKeywordReq:
      payload:
        type: object
        properties:
          action:
            type: string
            description: searchCardsByKeywordReq
          query:
            type: string
            description: Keyword query that will be searched in the scryfall api.
      examples:
        - name: searchCardsByKeywordReq
          payload:
            action: searchCardsByKeywordReq
            query: 'Obelisk the tormentor'

    getCardReq:
      summary: Request to get a card details
      payload:
        type: object
        properties:
          action: 
            type: string
            description: getCardReq
          scryfall_id:
            type: string
            description: The unique identifier for the card on Scryfall
            example: 'scryfall_id_123'
            

# Inventory

    getInventoryReq:
      payload:
        type: object
        properties:
          action: 
            type: string
            description: getInventoryReq
      examples:
        - name: getInventoryReq
          payload:
            action: getInventoryReq
    
    addCardToInventoryReq:
      payload:
        type: object
        properties:
          action:
            type: string
            description: addCardToInventoryReq
          inventory_id:
            type: string
            description: Inventory ID of the users inventory.
          inventory_card:
            type: object
            properties:
              scryfall_id:
                type: string
                description: The scryfall id of the card
                example: 'scryfall_id_1'              
              oracle_id:
                type: string
                description: The oracle id of the card
                example: 'oracle_id_1'              
              card_name:
                type: string
                description: Name of the card
                example: 'Fireball'
              colors:
                type: array
                items:
                  type: string
                  description: 'color(s) of the card, example: ["B", "R"]'
                  example: ["B", "R"]
              rarity:
                type: string
                description: The rarity of the card
                example: 'uncommon'
              quality:
                type: string
                description: The quality of the card
                example: 'damaged'
              prices:
                type: object
                items:
                  type: string
                  description: 'prices of the card, example:  
                  {"usd": "0.12", "usd_foil": "0.77","usd_etched": null,
                  "eur": "0.05","eur_foil": "0.40","tix": null}'
                  example: '{"eur": "0.05"}'

      examples:
        - name: TODO ADD NAME
          summary: TODO ADD SUMMARY
          payload:
            action: addCardToInventoryReq
            inventory_id: '128938129'
            inventory_card: '   { 
              "PK" : "INVENTORY_CARD#${rid1}",
              "SK" : "INVENTORY#1",
              "entity_type" : "INVENTORY_CARD",
              "inventory_id" : "1",
              "created_at" : "2023-01-12",
              "last_modified" : "2023-01-12",
              "card_id" : "${rid2}",
              "oracle_id" : "${rid3}",
              "card_name" : "${rid2}",
              "colors" : {"SS":["R"]},
              "prices": {"usd":"0.27"},
              "rarity" : "meta",
              "quality" : "uncommon",
              "deck_location" : "side",
              "GSI1_PK" : "INVENTORY#1",
              "GSI1_SK" : ""INVENTORY_CARD#${rid1}",
              "scryfall_id" : "${rid4}"
          }'

    removeCardFromInventoryReq:
      payload:
        type: object
        properties:
          action:
            type: string
            description: removeCardFromInventoryReq
          card_id:
            type: string
            description: Id of the card that should be removed.
          inventory_id:
            type: string
            description: Inventory ID of the user.
      examples:
        - name: removeCardFromInventoryReq
          payload:
            action: removeCardFromInventoryReq
            card_id: 01230-213123-422111-2312
            inventory_id: AFA3212-ASDFADF33-AFDFDA344-GFRD54
            
    searchInventoryCardReq:
      payload:
        type: object
        properties:
          action:
            type: string
            description: searchInventoryCardReq
          card_name:
            type: string
            description: The name of the card
          paginator_key:
            type: string
            description: The paginator key for retrieving the page results.
          filter:
            type: object
            description: A filter (color and type) for searching cards
      examples:
        - name: removeCardFromInventoryReq
          payload:
            action: removeCardFromInventoryReq
            card_id: 01230-213123-422111-2312
            inventory_id: AFA3212-ASDFADF33-AFDFDA344-GFRD54

# Deck

    getDecksReq:
      summary: Retrieve all decks associated with a user
      payload:
        type: object
        properties:
          action: 
            type: string
            description: getDecksReq

    getDeckReq:
      summary: Request to get a deck details
      payload:
        type: object
        properties:
          action: 
            type: string
            description: getDeckReq
          deck_id:
            type: string
            description: The unique identifier for the deck
            example: 'deck_id_123'

    createDeckReq:
      summary: Request to create a new deck
      payload:
        type: object
        properties:
          action: 
            type: string
            description: createDeckReq
          deck_name:
            type: string
            description: Name of the deck
            example: 'My Deck'
          deck_type:
            type: string
            description: Type of deck (EDH/COMMANDER)
            example: COMMANDER

    removeDeckReq:
      summary: Remove deck
      payload:
        type: object
        properties:
          action: 
            type: string
            description: removeDeckReq
          deck_id:
            type: string
            description: The unique identifier for the deck
            example: 'deck_id_123'

    moveDeckCardReq:
      summary: Move deck card
      payload:
        type: object
        properties:
          action: 
            type: string
            description: moveDeckCardReq
          deck_id:
            type: string
            description: The unique identifier for the deck
            example: 'deck_id_123'
          deck_card_id:
            type: string
            description: The unique identifier for the deck card
            example: 'deck_card_id_123'
          deck_type:
            type: string
            description: The card will be moved to this deck type
            example: 'side_deck'
             
    addCardToDeckReq:
      summary: Request to add a card to a user's deck
      payload:
        type: object
        properties:
          action: 
            type: string
            description: addCardToDeckReq
          deck_name:
            type: string
            description: Name of the deck
            example: MODERN PRELIMINARY
          deck_type:
            type: string
            description: Type of deck (main_deck or side_deck)
            example: main_deck
          deck_id:
            type: string
            description: ID of the deck
            example: 'deck_id_123'
          inventory_card:
            type: object
            properties:
              card_id:
                type: string
                description: ID of the card
                example: 'card_id_123'
              scryfall_id:
                type: string
                description: The unique identifier for the card on Scryfall
                example: 'scryfall_id_123'
              oracle_id:
                type: string
                description: The oracle id of the card
                example: 'oracle_id_1'   
              inventory_id:
                type: string
                description: ID of the inventory
                example: 'inventory_id_123'
              card_name:
                type: string
                description: Name of the card
                example: 'Fireball'
              colors:
                type: array
                items:
                  type: string
                  description: 'color(s) of the card, example: ["B", "R"]'
                  example: ["B", "R"]
              rarity:
                type: string
                description: Rarity of the card
                example: 'rare'
              quality:
                type: string
                description: Quality of the card
                example: 'mint'
              image_url:
                type: string
                description: URL of the card's image
                example: 'https://example.com/image.jpg'
            
    removeCardFromDeckReq:
      summary: Request to remove a card from user's deck
      payload:
        type: object
        properties:
          action: 
            type: string
            description: removeCardFromDeckReq
          deck_id:
            type: string
            description: ID of the deck
            example: 'deck_id_123'
          deck_type:
            type: string
            description: Type of deck (main_deck or side_deck)
            example: main_deck
          inventory_id:
            type: string
            description: The id of the inventory of the user
            example: 1
          deck_card:
            type: object
            properties:
              card_id:
                type: string
                description: ID of the card
                example: 'card_id_123'
              scryfall_id:
                type: string
                description: The unique identifier for the card on Scryfall
                example: 'scryfall_id_123'
              oracle_id:
                type: string
                description: The oracle id of the card
                example: 'oracle_id_1'   
              inventory_id:
                type: string
                description: ID of the inventory
                example: 'inventory_id_123'
              card_name:
                type: string
                description: Name of the card
                example: 'Fireball'
              colors:
                type: array
                items:
                  type: string
                  description: 'color(s) of the card, example: ["B", "R"]'
                  example: ["B", "R"]
              rarity:
                type: string
                description: Rarity of the card
                example: 'rare'
              quality:
                type: string
                description: Quality of the card
                example: 'mint'
              image_url:
                type: string
                description: URL of the card's image
                example: 'https://example.com/image.jpg'
              deck_location:
                type: string
                description: In wich deck the card is located
                example: 'White-Blue: Azorius'   


# Wishlist                

    createAlertReq:
      summary: Creates a price or availabilty alert
      payload:
        type: object
        properties:
          action: 
            type: string
            description: createAlertReq
          wishlist_item_id:
            type: string
            description: The wishlist item id
            example: 'wishlist_item_id_1'
          alert_item:
            type: object
            properties:
              alert_type:
                type: string
                description: PRICE or AVAILABILITY
                example: 'PRICE'
              price_point:
                type: string
                description: The price point of the alert (only needed if PRICE alert)
                example: '5.00'
              wishlist_item_id:
                type: string
                description: The alert will be created for this wishlist item id
                example: 'wishlist_item_id_1'

    getWishlistReq:
      summary: Request to get a wishlist details
      payload:
        type: object
        properties:
          action: 
            type: string
            description: getWishlistReq

    createWishlistItemReq:
      summary: Request to create a wishlist item
      payload:
        type: object
        properties:
          action: 
            type: string
            description: createWishlistItemReq
          deck_id: 
            type: string
            description: for adding a wishlist item to a deck
          wishlist_item:
            type: object
            properties:
              oracle_id:
                type: string
                description: The oracle id of the card
                example: 'oracle_id_1'   
              image_url:
                type: string
                description: URL of the card's image
                example: 'https://example.com/image.jpg'
              card_name:
                type: string
                description: Name of the card
                example: 'Fireball'
                
    getAlertsReq:
      summary: Request to get a wishlist details
      payload:
        type: object
        properties:
          action: 
            type: string
            description: getAlertsReq
          wishlist_item_id:
            type: string
            description: The alerts will be retrieved from this wishlist item id
            example: 'wishlist_item_id_1'
                                 
    removeAlertReq:
      summary: Request remove a price or availability alert
      payload:
        type: object
        properties:
          action: 
            type: string
            description: removeAlertReq
          wishlist_item_id:
            type: string
            description: Removes a price or availability alert from this wishlist item id
            example: 'wishlist_item_id_1'
          alert_item:
            type: object
            properties:
              alert_type:
                type: string
                description: PRICE or AVAILABILITY
                example: 'PRICE'
              price_point:
                type: string
                description: The price point of the alert (only needed if PRICE alert)
                example: '5.00'
              wishlist_item_id:
                type: string
                description: The alert will be created for this wishlist item id
                example: 'wishlist_item_id_1'

    removeWishlistItemReq:
      summary: Request to remove a wishlist item
      payload:
        type: object
        properties:
          action: 
            type: string
            description: removeWishlistItemReq
          wishlist_item_id: 
            type: string
            description: The wishlist item id
