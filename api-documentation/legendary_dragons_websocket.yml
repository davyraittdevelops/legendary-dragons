asyncapi: 2.5.0
info:
  title: Legendary dragons websocket documentation
  version: '0.1.0'
  description: Legendary Dragons is a Magic The Gathering collection management tool that allows users to track and organize their cards. Users can add, delete, and update cards in their collection, view detailed information about each card, and search for specific cards.  Additionally, it has a deck building feature that allows players to create and manage custom decks. It also includes a wishlist feature that allows users to keep track of cards they want to acquire. The tool is available as a web application and as a mobile application.


servers:
  public:
    url: wss://3ghgk1q3mf.execute-api.us-east-1.amazonaws.com/Prod
    protocol: wss

channels:
  $connect:
    description: AWS Lambda function that creates a new item in a DynamoDB table to store WebSocket connections. It uses Boto3 library to interact with DynamoDB, and X-Ray SDK to trace and debug requests. The function extracts connection and user information from the event object and adds it to the table as an item with primary and sort keys and a Global Secondary Index. It also logs messages using the logging module and returns a JSON object with a status code of 200 on success.
    subscribe:
      message:
        $ref: '#/components/messages/$connect'

  $disconnect:
    description: AWS Lambda function that deletes an item from a DynamoDB table storing WebSocket connections. It uses Boto3 library to interact with DynamoDB, and X-Ray SDK to trace and debug requests. The function extracts the connection ID and user ID from the event object and uses it to delete the item from the table. It also logs messages using the logging module and returns a JSON object with a status code of 200 on success.
    publish:
      message:
        $ref: '#/components/messages/$disconnect'

  addCardToInventoryReq:
    description: AWS Lambda function that creates a new item in a DynamoDB table to store Magic The Gathering cards as part of an inventory. It uses Boto3 library to interact with DynamoDB, and X-Ray SDK to trace and debug requests. The function extracts the card information and the inventory and user ID from the event object, generates a unique card ID and adds it to the table as an item with primary and sort keys and a Global Secondary Index. It also logs messages using the logging module and returns a JSON object with a status code of 200 on success.
    publish:
      message:
        $ref: '#/components/messages/addCardToInventoryReq'

  getInventoryReq:
    description: The function extracts the user ID from the event object, and queries the DynamoDB table using the user ID and a Global Secondary Index (GSI1) to retrieve the inventory for that user. It then queries the table again using the inventory ID and GSI1 to retrieve the inventory cards for that inventory. If the inventory is not found it returns a status code of 404, otherwise it returns a JSON object with a status code of 200 on success and sends the inventory data to the client via the AWS Api Gateway Management Api.
    subscribe:
      message:
        $ref: '#/components/messages/getInventoryReq'

  searchCardsByKeywordReq:
    description: AWS Lambda function that queries the Scryfall API for Magic The Gathering cards based on a keyword given in the request. It uses the requests library to make GET requests to the Scryfall API, with a small delay before each request as recommended by the API docs. It maps the response to a specific format and logs the total number of cards found and the number of cards returned. It then sends the data in chunks, to avoid large payloads, using the AWS Api Gateway Management Api to a connected client specified by the connection ID. The function also uses the AWS X-Ray SDK to trace and debug requests. It returns a JSON object with a status code of 200 on success.
    publish:
      message:
        $ref: '#/components/messages/searchCardsByKeywordReq'

  removeCardFromInventoryReq:
    description: removeCardFromInventoryReq is an AWS Lambda function that removes a card from a DynamoDB table based on the provided inventory ID and card ID. It is triggered by a websocket event and it extracts the inventory ID and card ID from the event. It initializes a DynamoDB resource and table, and then uses the provided inventory ID and card ID to construct the primary key and sort key of the card item to be deleted. Then it uses the DynamoDB delete_item method to remove the card from the table. It returns a 200 status code if the deletion was successful.
    publish:
      message:
        $ref: '#/components/messages/removeCardFromInventoryReq'

  addCardToDeck:
      publish:
        summary:  function that handles adding a card to a deck in a DynamoDB table. It takes in JSON data in the request body containing the deck type, user id, deck id, and inventory card details. It then updates the inventory card's deck location and adds the card to the specified deck in the DynamoDB table. It also sends an event to an event bus to notify of the card being added to the deck. The function returns a 200 status code upon success.
        message:
          $ref: '#/components/messages/addCardToDeckReq'
  
  createDeck:
      subscribe:
        summary: This code creates a new deck in DynamoDB table with a unique ID generated using uuid package. It extracts the deck name and type from the request body, and user ID from request context. It sets the current time as the creation and modification time. It also sets the user_id and total_value to 0. It then adds this new deck to the DynamoDB table using the put_item() method. It returns a HTTP status code of 200 upon successful execution.
        message:
          $ref: '#/components/messages/createDeckReq'

  getCard:
      subscribe:
        summary: This function is triggered by an API Gateway. It takes in a request with a scryfall_id in the body, which is used to query a DynamoDB table for card details and card faces. The card details and card faces are then returned to the client via the apigatewaymanagementapi client. Additionally, it uses the DecimalEncoder class to handle any Decimal data types in the returned data. The function uses two helper function get_card_details and get_card_faces to query DynamoDB table. The get_card_details function queries the table for card details by searching for an item with a primary key of PK CARD{scryfall_id} and a sort key that begins with SK CARD_FACE. The get_card_faces function queries the table for card faces by searching for an item with a GSI1 primary key of GSI1_PK CARD{scryfall_id} and a GSI1 sort key that begins with GSI1_SK CARD_FACE, using index GSI1. If the query is successful, the result is returned. If there is an exception, it is logged and returned.
        message:
          $ref: '#/components/messages/getCardReq'

  getDeck:
      subscribe:
        summary: This code is a lambda function that is triggered by an API Gateway. It takes in a request with a deck_id in the body, which is used to query a DynamoDB table for deck details, deck cards and side deck cards. The deck details, deck cards and side deck cards are then returned to the client via the apigatewaymanagementapi client. Additionally, it uses the DecimalEncoder class to handle any Decimal data types in the returned data. The function queries DynamoDB table using the KeyConditionExpression parameter, to search for items with a specific primary key and a sort key that starts with a specific value. The query is done in 3 steps, first it queries the table for the deck by searching for an item with a primary key of PK "DECK#{deck_id}" and a sort key that starts with "USER#". Second it queries the table for the deck cards by searching for an item with a GSI1 primary key of GSI1_PK "DECK#{deck_id}" and a GSI1 sort key that starts with "DECK_CARD#", using index GSI1. Lastly, it queries the table for the side deck cards by searching for an item with a GSI1 primary key of GSI1_PK "DECK#{deck_id}#SIDE_DECK" and a GSI1 sort key that starts with "DECK_CARD#", using index GSI1. If the query is successful, the result is returned. If there is an exception, it is logged and returned.
        message:
          $ref: '#/components/messages/getDeckReq'
  
  getDecks:
      subscribe:
        summary: This Lambda function is triggered by an API Gateway. It takes in a request and uses the userId from the request context's authorizer to query a DynamoDB table for all decks belonging to the user. The decks are returned to the client via the apigatewaymanagementapi client. Additionally, it uses the DecimalEncoder class to handle any Decimal data types in the returned data. The function queries the DynamoDB table using the GSI1_PK of "USER#{user_id}" and a GSI1_SK that begins with "DECK#", using index GSI1. The query returns all decks for the provided userId and these decks are returned to the client via apigatewaymanagementapi client. If there is an exception, it is logged.
        message:
          $ref: '#/components/messages/getDecksReq'
  
  deleteDeck:
      subscribe:
        operationId: deleteDeck
        summary: Delete a deck
        message:
          $ref: '#/components/messages/deleteDeckReq'
  
# COMPONENTS ATTACHED TO THE CHANNELS
components:
  messages:
    deleteDeckReq:
      summary: Delete deck
      payload:
        type: object
        properties:
          statusCode:
            type: integer
            description: The status code of the response

    getDecksReq:
      summary: Retrieve all decks associated with a user
      payload:
        type: object
        properties:
          event_type:
            type: string
            description: Event type indicating the type of response message
          data:
            type: array
            items:
              type: object
              properties:
                PK:
                  type: string
                  description: The primary key for the DynamoDB table
                SK:
                  type: string
                  description: The sort key for the DynamoDB table
                entity_type:
                  type: string
                  description: The type of the entity stored in the table
                created_at:
                  type: string
                  description: The timestamp when the deck was created
                last_modified:
                  type: string
                  description: The timestamp when the deck was last modified
                deck_id:
                  type: string
                  description: The unique ID of the deck
                deck_name:
                  type: string
                  description: The name of the deck
                deck_type:
                  type: string
                  description: The type of the deck
                user_id:
                  type: string
                  description: The ID of the user associated with the deck
                GSI1_PK:
                  type: string
                  description: The primary key of the global secondary index
                GSI1_SK:
                  type: string
                  description: The sort key of the global secondary index
                total_value:
                  type: string
                  description: The total value of the cards in the deck

    getDeckReq:
      summary: Request to get a deck details
      payload:
        type: object
        properties:
          deck_id:
            type: string
            description: The unique identifier for the deck
            example: 'deck_id_123'

    getCardReq:
      summary: Request to get a card details
      payload:
        type: object
        properties:
          scryfall_id:
            type: string
            description: The unique identifier for the card on Scryfall
            example: 'scryfall_id_123'

    createDeckReq:
      summary: Request to create a new deck
      payload:
        type: object
        properties:
          deck_name:
            type: string
            description: Name of the deck
            example: 'My Deck'
          deck_type:
            type: string
            description: Type of deck (main_deck or side_deck)
            example: main_deck

    addCardToDeckReq:
      summary: Request to add a card to a user's deck
      payload:
        type: object
        properties:
          deck_type:
            type: string
            description: Type of deck (main_deck or side_deck)
            example: main_deck
          deck_id:
            type: string
            description: ID of the deck
            example: 'deck_id_123'
          inventory_card:
            type: object
            properties:
              card_id:
                type: string
                description: ID of the card
                example: 'card_id_123'
              inventory_id:
                type: string
                description: ID of the inventory
                example: 'inventory_id_123'
              card_name:
                type: string
                description: Name of the card
                example: 'Fireball'
              colors:
                type: array
                items:
                  type: string
                  example: 'red'
              rarity:
                type: string
                description: Rarity of the card
                example: 'rare'
              quality:
                type: string
                description: Quality of the card
                example: 'mint'
              image_url:
                type: string
                description: URL of the card's image
                example: 'https://example.com/image.jpg'
    
    $connect:
      payload:
        type: object
        properties:
          action:
            type: string
            description: Action should be connect
          token:
            type: string
            description: Token should be a valid jwt token retrieved from the /login function
      examples:
        - name:  $connect
          payload:
            action/route: $connect
            token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0Ijox'

    $disconnect:
      payload:
        type: object
        properties:
          connectionId:
            type: string
            description: connectionId that will be terminated
      examples:
        - name:  $disconnect
          payload:
            action/route: $disconnect

    addCardToInventoryReq:
      payload:
        type: object
        properties:
          inventory_id:
            type: string
            description: Inventory ID of the users inventory.
          inventory_card:
            type: string
            description: Card that will be added to the inventory.
      examples:
        - name: TODO ADD NAME
          summary: TODO ADD SUMMARY
          payload:
            action: addCardToInventoryReq
            inventory_id: '128938129'
            inventory_card: '   { 
              "PK" : "INVENTORY_CARD#${rid1}",
              "SK" : "INVENTORY#1",
              "entity_type" : "INVENTORY_CARD",
              "inventory_id" : "1",
              "created_at" : "2023-01-12",
              "last_modified" : "2023-01-12",
              "card_id" : "${rid2}",
              "oracle_id" : "${rid3}",
              "card_name" : "${rid2}",
              "colors" : {"SS":["R"]},
              "prices": {"usd":"0.27"},
              "rarity" : "meta",
              "quality" : "uncommon",
              "deck_location" : "side",
              "GSI1_PK" : "INVENTORY#1",
              "GSI1_SK" : ""INVENTORY_CARD#${rid1}",
              "scryfall_id" : "${rid4}"
          }'

    getInventoryReq:
      payload:
        type: object
        properties:
          user_id:
            type: string
            description: We need user_id to find the matching inventory.
      examples:
        - name: getInventoryReq
          payload:
            action: getInventoryReq

    searchCardsByKeywordReq:
      payload:
        type: object
        properties:
          query:
            type: string
            description: Keyword query that will be searched in the scryfall api.
      examples:
        - name: searchCardsByKeywordReq
          payload:
            action: searchCardsByKeywordReq
            query: 'Obelisk the tormentor'

    removeCardFromInventoryReq:
      payload:
        type: object
        properties:
          action:
            type: string
            description: Websocket action/route
          card_id:
            type: string
            description: Card_id of the card that should be removed.
          inventory_id:
            type: string
            description: Inventory ID of the user.
      examples:
        - name: removeCardFromInventoryReq
          payload:
            action: removeCardFromInventoryReq
            card_id: 01230-213123-422111-2312
            inventory_id: AFA3212-ASDFADF33-AFDFDA344-GFRD54